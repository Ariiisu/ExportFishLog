# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(ExportFishLog
	VERSION
		1.4
)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
	if(POLICY CMP0135)
		cmake_policy(SET CMP0135 NEW)
	endif()
	message(STATUS "Fetching vcpkg (2023.08.09)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2023.08.09.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

include(FetchContent)

message(STATUS "Fetching tomlplusplus (dbc4bcecf20b7c45fe9d39ca2aa4b28c35e4e83a)...")
FetchContent_Declare(tomlplusplus SYSTEM
	GIT_REPOSITORY
		"https://github.com/marzer/tomlplusplus"
	GIT_TAG
		dbc4bcecf20b7c45fe9d39ca2aa4b28c35e4e83a
)
FetchContent_MakeAvailable(tomlplusplus)

message(STATUS "Fetching glaze (e7d2da91e38182885d602d792d6b1e24f24185a9)...")
FetchContent_Declare(glaze SYSTEM
	GIT_REPOSITORY
		"https://github.com/stephenberry/glaze"
	GIT_TAG
		e7d2da91e38182885d602d792d6b1e24f24185a9
)
FetchContent_MakeAvailable(glaze)

message(STATUS "Fetching magic_enum (3437129f30c926e740ae5943cef27cd0b836c4be)...")
FetchContent_Declare(magic_enum SYSTEM
	GIT_REPOSITORY
		"https://github.com/Neargye/magic_enum"
	GIT_TAG
		3437129f30c926e740ae5943cef27cd0b836c4be
)
FetchContent_MakeAvailable(magic_enum)

# Packages
find_package(fmt REQUIRED)

find_package(zlib REQUIRED)

find_package(unofficial-minizip REQUIRED)

find_package(nlohmann_json REQUIRED)

# Target: xivres
set(CMKR_TARGET xivres)
find_path(SRELL_INCLUDE_DIRS "srell.hpp")

set(xivres_SOURCES
	"xivres/impl/TinySha1.cpp"
	"xivres/impl/common.cpp"
	"xivres/impl/excel.cpp"
	"xivres/impl/excel.type2gen.cpp"
	"xivres/impl/fontdata.cpp"
	"xivres/impl/installation.cpp"
	"xivres/impl/packed_stream.cpp"
	"xivres/impl/packed_stream.hotswap.cpp"
	"xivres/impl/packed_stream.model.cpp"
	"xivres/impl/packed_stream.placeholder.cpp"
	"xivres/impl/packed_stream.standard.cpp"
	"xivres/impl/packed_stream.texture.cpp"
	"xivres/impl/path_spec.cpp"
	"xivres/impl/sound.cpp"
	"xivres/impl/sqpack.cpp"
	"xivres/impl/sqpack.generator.cpp"
	"xivres/impl/sqpack.reader.cpp"
	"xivres/impl/stream.cpp"
	"xivres/impl/textools.cpp"
	"xivres/impl/texture.cpp"
	"xivres/impl/texture.mipmap_stream.cpp"
	"xivres/impl/texture.preview.cpp"
	"xivres/impl/texture.stream.cpp"
	"xivres/impl/unpacked_stream.cpp"
	"xivres/impl/unpacked_stream.model.cpp"
	"xivres/impl/unpacked_stream.placeholder.cpp"
	"xivres/impl/unpacked_stream.standard.cpp"
	"xivres/impl/unpacked_stream.texture.cpp"
	"xivres/impl/util.bitmap_copy.cpp"
	"xivres/impl/util.dxt.cpp"
	"xivres/impl/util.thread_pool.cpp"
	"xivres/impl/util.unicode.cpp"
	"xivres/impl/util.zlib_wrapper.cpp"
	"xivres/impl/xivstring.cpp"
	"xivres/include/xivres/common.h"
	"xivres/include/xivres/equipment_and_gimmick_parameter.h"
	"xivres/include/xivres/equipment_deformer_parameter.h"
	"xivres/include/xivres/ex_skeleton_table.h"
	"xivres/include/xivres/excel.h"
	"xivres/include/xivres/excel.type2gen.h"
	"xivres/include/xivres/fontdata.h"
	"xivres/include/xivres/image_change_data.h"
	"xivres/include/xivres/installation.h"
	"xivres/include/xivres/model.h"
	"xivres/include/xivres/packed_stream.h"
	"xivres/include/xivres/packed_stream.hotswap.h"
	"xivres/include/xivres/packed_stream.model.h"
	"xivres/include/xivres/packed_stream.placeholder.h"
	"xivres/include/xivres/packed_stream.standard.h"
	"xivres/include/xivres/packed_stream.texture.h"
	"xivres/include/xivres/path_spec.h"
	"xivres/include/xivres/sound.h"
	"xivres/include/xivres/sqpack.generator.h"
	"xivres/include/xivres/sqpack.h"
	"xivres/include/xivres/sqpack.reader.h"
	"xivres/include/xivres/stream.h"
	"xivres/include/xivres/textools.h"
	"xivres/include/xivres/texture.h"
	"xivres/include/xivres/texture.mipmap_stream.h"
	"xivres/include/xivres/texture.preview.h"
	"xivres/include/xivres/texture.stream.h"
	"xivres/include/xivres/unpacked_stream.h"
	"xivres/include/xivres/unpacked_stream.model.h"
	"xivres/include/xivres/unpacked_stream.placeholder.h"
	"xivres/include/xivres/unpacked_stream.standard.h"
	"xivres/include/xivres/unpacked_stream.texture.h"
	"xivres/include/xivres/util.bitmap_copy.h"
	"xivres/include/xivres/util.byte_order.h"
	"xivres/include/xivres/util.dxt.h"
	"xivres/include/xivres/util.h"
	"xivres/include/xivres/util.listener_manager.h"
	"xivres/include/xivres/util.on_dtor.h"
	"xivres/include/xivres/util.pixel_formats.h"
	"xivres/include/xivres/util.sha1.h"
	"xivres/include/xivres/util.span_cast.h"
	"xivres/include/xivres/util.thread_pool.h"
	"xivres/include/xivres/util.unicode.h"
	"xivres/include/xivres/util.zlib_wrapper.h"
	"xivres/include/xivres/xivstring.h"
	cmake.toml
)

add_library(xivres STATIC)

target_sources(xivres PRIVATE ${xivres_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${xivres_SOURCES})

add_library(xivres::xivres ALIAS xivres)
if(WIN32) # windows
	target_compile_definitions(xivres PUBLIC
		NOMINMAX
	)
endif()

target_compile_features(xivres PUBLIC
	cxx_std_23
)

if(MSVC) # msvc
	target_compile_options(xivres PRIVATE
		"/permissive-"
		"/w14640"
		"/EHsc"
		"/MP"
	)
endif()

target_include_directories(xivres PUBLIC
	${SRELL_INCLUDE_DIRS}
)

target_link_libraries(xivres PUBLIC
	unofficial::minizip::minizip
	ZLIB::ZLIB
	nlohmann_json::nlohmann_json
)

# Target: ExportFishLog
set(ExportFishLog_SOURCES
	"src/data/config.cpp"
	"src/data/game.cpp"
	"src/main.cpp"
	"src/memory/pattern.cpp"
	"src/memory/process.cpp"
	"src/data/json.hpp"
	"src/data/config.h"
	"src/data/game.h"
	"src/memory/pattern.h"
	"src/memory/process.h"
	cmake.toml
)

add_executable(ExportFishLog)

target_sources(ExportFishLog PRIVATE ${ExportFishLog_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${ExportFishLog_SOURCES})

if(WIN32) # windows
	target_compile_definitions(ExportFishLog PRIVATE
		NOMINMAX
	)
endif()

target_compile_features(ExportFishLog PRIVATE
	cxx_std_23
)

if(MSVC) # msvc
	target_compile_options(ExportFishLog PRIVATE
		"/permissive-"
		"/w14640"
		"/EHsc"
		"/MP"
	)
endif()

target_include_directories(ExportFishLog PRIVATE
	"xivres/include/"
)

target_link_libraries(ExportFishLog PRIVATE
	tomlplusplus::tomlplusplus
	fmt::fmt
	glaze::glaze
	magic_enum::magic_enum
	xivres::xivres
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ExportFishLog)
endif()

